name: Release on Windows GPU

# GitHub Actions workflow for building and packaging RadarSimPy on Windows platforms.
#
# This workflow builds RadarSimPy for Windows x64 architecture across multiple Python
# versions and build tiers (standard/free). It uses the latest Windows runner with
# MSVC compiler and provides comprehensive Windows-specific optimizations.
#
# Build Matrix:
# - Windows x64: MSVC compiler, 10 builds (5 Python × 2 tiers)
# - Python versions: 3.9, 3.10, 3.11, 3.12, 3.13
# - Build tiers: standard (full features), free (limited features)
# - Total builds: 10
#
# Features:
# - Windows-specific dependency management
# - Artifact verification and validation
# - Windows-native artifact packing
# - Detailed build reporting and summaries
# - Error handling with build log uploads
# - PowerShell and CMD integration
#
# Outputs:
# - Individual artifacts for each build configuration
# - Packed ZIP archive containing all builds organized by tier
# - Build summaries and statistics
#
# Triggers:
# - Tag pushes (release events)
# - Manual workflow dispatch

on:
  push:
    tags:
      - "*"
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

env:
  # Global environment variables
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  build:
    runs-on: windows-2025
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows Standard builds
          - python-version: "3.9"
            tier: standard
            arch: gpu
            artifact_name: radarsimpy_windows_py3.9
          - python-version: "3.10"
            tier: standard
            arch: gpu
            artifact_name: radarsimpy_windows_py3.10
          - python-version: "3.11"
            tier: standard
            arch: gpu
            artifact_name: radarsimpy_windows_py3.11
          - python-version: "3.12"
            tier: standard
            arch: gpu
            artifact_name: radarsimpy_windows_py3.12
          - python-version: "3.13"
            tier: standard
            arch: gpu
            artifact_name: radarsimpy_windows_py3.13
          # Windows Free Tier builds
          - python-version: "3.9"
            tier: free
            arch: gpu
            artifact_name: radarsimpy_windows_py3.9_freetier
          - python-version: "3.10"
            tier: free
            arch: gpu
            artifact_name: radarsimpy_windows_py3.10_freetier
          - python-version: "3.11"
            tier: free
            arch: gpu
            artifact_name: radarsimpy_windows_py3.11_freetier
          - python-version: "3.12"
            tier: free
            arch: gpu
            artifact_name: radarsimpy_windows_py3.12_freetier
          - python-version: "3.13"
            tier: free
            arch: gpu
            artifact_name: radarsimpy_windows_py3.13_freetier

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.RADARSIMC}}
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.tier }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.tier }}-
            ${{ runner.os }}-${{ matrix.python-version }}-
            ${{ runner.os }}-

      - name: Setup CUDA Toolkit
        uses: N-Storm/cuda-toolkit@v0.2.27m
        with:
          cuda: "13.0.0"
          method: "local"
          use-github-cache: false

      - name: Verify CUDA installation
        run: |
          echo "::group::CUDA Verification"
          nvcc --version
          echo "CUDA_PATH: %CUDA_PATH%"
          echo "PATH: %PATH%"
          if exist "%CUDA_PATH%\bin\" (
            dir "%CUDA_PATH%\bin\" | findstr nvcc
          ) else (
            echo "CUDA bin directory not found"
          )
          if exist "%CUDA_PATH%\lib\x64\" (
            echo "CUDA lib directory found"
          ) else (
            echo "CUDA lib directory not found"
          )
          echo "::endgroup::"
        shell: cmd

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements-dev.txt

      - name: Display build information
        run: |
          echo "::group::Build Information"
          echo "OS: windows-latest"
          echo "Python: ${{ matrix.python-version }}"
          echo "Tier: ${{ matrix.tier }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "CUDA Version: $(nvcc --version | findstr "release" | for /f "tokens=5" %%a in ('findstr "release"') do echo %%a)"
          echo "::endgroup::"

          echo "::group::System Information"
          systeminfo | findstr /C:"OS Name" /C:"OS Version"
          python --version
          pip --version
          nvcc --version
          echo "::endgroup::"
        shell: cmd

      - name: Build RadarSimPy
        env:
          CUDA_PATH: ${{ env.CUDA_PATH }}
          CUDA_HOME: ${{ env.CUDA_PATH }}
          CUDACXX: ${{ env.CUDA_PATH }}\bin\nvcc.exe
          CUDA_TOOLKIT_ROOT_DIR: ${{ env.CUDA_PATH }}
        run: |
          echo "::group::Build Process"
          .\build.bat --tier=${{ matrix.tier }} --arch=${{ matrix.arch }} --test=off
          echo "::endgroup::"
        shell: cmd

      - name: Verify build artifacts
        run: |
          echo "::group::Build Verification"
          dir /s .\radarsimpy\
          if exist ".\radarsimpy\__init__.py" (
            echo "✓ Python module found"
          ) else (
            echo "✗ Python module missing"
            exit /b 1
          )

          # Check for compiled extensions
          dir /s .\radarsimpy\*.pyd >nul 2>&1
          if %errorlevel% == 0 (
            echo "✓ Compiled extensions found:"
            dir /s .\radarsimpy\*.pyd
          ) else (
            echo "✗ No compiled extensions found"
            exit /b 1
          )
          echo "::endgroup::"
        shell: cmd

      - name: Archive built module
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: .\radarsimpy
          retention-days: 1
          compression-level: 6

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.artifact_name }}
          path: |
            .\build_logs\
            *.log
          retention-days: 1

  # Pack all artifacts and generate build summary
  pack-artifacts-and-summary:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Delete downloaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            radarsimpy_windows_py*

      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded Artifacts"
          find artifacts/ -type f -name "*.py" -o -name "*.pyd" -o -name "*.dll" | head -20
          echo "::endgroup::"

      - name: Create artifact structure
        run: |
          mkdir -p packed/radarsimpy_windows_gpu_all

          # Create base directory structure for final archive
          mkdir -p packed/radarsimpy_windows_gpu_all/standard
          mkdir -p packed/radarsimpy_windows_gpu_all/trial

          # Create temporary directories for building tier-specific packages
          mkdir -p temp/standard/radarsimpy
          mkdir -p temp/trial/radarsimpy

          # Process each artifact directory and organize by tier
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Determine target directory based on artifact name
              if [[ "$artifact_name" == *"_freetier"* ]]; then
                temp_dir="temp/trial/radarsimpy"
                tier="trial"
              else
                temp_dir="temp/standard/radarsimpy"
                tier="standard"
              fi
              
              echo "Target temp directory: $temp_dir"
              
              # Copy the radarsimpy module to temp directory
              source_radarsimpy="$dir/radarsimpy"
              if [ -d "$source_radarsimpy" ]; then
                echo "Copying radarsimpy module from $source_radarsimpy to $temp_dir"
                cp -r "$source_radarsimpy"/* "$temp_dir/" 2>/dev/null || true
              else
                echo "Copying all contents from $dir to $temp_dir"
                cp -r "$dir"/* "$temp_dir/" 2>/dev/null || true
              fi
            fi
          done

          # Create ZIP files for each tier
          echo "Creating Windows_x86_64_GPU.zip for standard tier..."
          cd temp/standard && zip -r ../../packed/radarsimpy_windows_gpu_all/standard/Windows_x86_64_GPU.zip . && cd ../..

          echo "Creating Windows_x86_64_GPU.zip for trial tier..."
          cd temp/trial && zip -r ../../packed/radarsimpy_windows_gpu_all/trial/Windows_x86_64_GPU.zip . && cd ../..

      - name: Verify artifact structure
        run: |
          echo "::group::Artifact Structure Verification"
          echo "Final directory structure:"
          find packed/radarsimpy_windows_gpu_all -type f | sort

          echo ""
          echo "Verifying ZIP files exist:"
          if [ -f "packed/radarsimpy_windows_gpu_all/standard/Windows_x86_64_GPU.zip" ]; then
            echo "✓ Standard tier ZIP found"
          else
            echo "✗ Standard tier ZIP missing"
          fi

          if [ -f "packed/radarsimpy_windows_gpu_all/trial/Windows_x86_64_GPU.zip" ]; then
            echo "✓ Trial tier ZIP found"
          else
            echo "✗ Trial tier ZIP missing"
          fi
          echo "::endgroup::"

      - name: Create README for packed artifacts
        run: |
          cat > packed/radarsimpy_windows_gpu_all/README.md << 'EOF'
          # RadarSimPy Windows GPU Build Artifacts

          This archive contains all RadarSimPy builds for Windows GPU platforms organized by tier.

          ## Directory Structure

          The builds are organized in the following structure:

          ```
          radarsimpy_windows_gpu_all/
          ├── standard/
          │   └── Windows_x86_64_GPU.zip
          └── trial/
              └── Windows_x86_64_GPU.zip
          ```

          ## Tier Information

          ### Windows_x86_64_GPU.zip (Windows x64 with GPU support)
          - **standard/**: Full-featured builds with all capabilities including GPU acceleration
          - **trial/**: Free tier builds with limited features
          - Built on Windows with MSVC compiler and CUDA support
          - Each ZIP contains the complete radarsimpy module with all Python versions supported

          ## Build Information

          - **Total Builds**: 10 (packaged into 2 ZIP files)
          - **Architecture**: x64
          - **GPU Support**: CUDA-enabled
          - **Python Versions**: 3.9, 3.10, 3.11, 3.12, 3.13
          - **Tiers**: Standard (full features), Trial (limited features)
          - **Build Date**: $(date)

          ## Usage

          1. Extract the main archive
          2. Navigate to the desired tier directory (standard/ or trial/)
          3. Extract the Windows_x86_64_GPU.zip file
          4. The radarsimpy module will be ready for use with GPU acceleration
          EOF

      - name: Create compressed archive
        run: |
          cd packed
          zip -r radarsimpy_windows_gpu_all_builds.zip radarsimpy_windows_gpu_all/

          echo "::group::Archive Information"
          ls -lh *.zip
          echo "::endgroup::"

      - name: Upload packed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radarsimpy_windows_gpu_all_builds
          path: packed/radarsimpy_windows_gpu_all_builds.zip
          retention-days: 1
          compression-level: 0

      - name: Generate build summary
        run: |
          echo "# Windows GPU Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "Total builds: 10 [5 Python versions x 2 tiers]" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Architecture Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows x64**: 10 builds on windows-2025 with GPU support" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tier Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Standard**: 5 builds" >> $GITHUB_STEP_SUMMARY
          echo "- **Free**: 5 builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Python Versions" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.9, 3.10, 3.11, 3.12, 3.13" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Packed Artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **All artifacts successfully packed into ZIP files by tier**" >> $GITHUB_STEP_SUMMARY
            echo "- Archive: \`radarsimpy_windows_gpu_all_builds\`" >> $GITHUB_STEP_SUMMARY
            echo "- Format: zip" >> $GITHUB_STEP_SUMMARY
            echo "- Structure: standard/Windows_x86_64_GPU.zip and trial/Windows_x86_64_GPU.zip" >> $GITHUB_STEP_SUMMARY
            echo "- Contains: All 10 build variants organized by tier in separate ZIP files" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Artifact packing failed or was skipped**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "Check individual job results above for detailed build information." >> $GITHUB_STEP_SUMMARY

          # Check if any builds failed
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some builds may have failed. Check individual job logs for details.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi

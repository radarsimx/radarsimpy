name: Release on MacOS

# GitHub Actions workflow for building and packaging RadarSimPy on macOS platforms.
#
# This workflow builds RadarSimPy across multiple macOS versions, Python versions,
# and build tiers (standard/free). It supports both Intel x64 and Apple Silicon ARM64
# architectures to provide comprehensive macOS coverage.
#
# Build Matrix:
# - macOS 13 (Intel x64): GCC-14 compiler, 10 builds (5 Python × 2 tiers)
# - macOS 15 (Apple Silicon ARM64): Clang compiler, 10 builds (5 Python × 2 tiers)
# - Python versions: 3.9, 3.10, 3.11, 3.12, 3.13
# - Build tiers: standard (full features), free (limited features)
# - Total builds: 20
#
# Features:
# - Comprehensive caching (pip, Homebrew, ccache)
# - Build optimization with ccache
# - Xcode version management
# - Artifact verification and validation
# - Multi-architecture artifact packing
# - Detailed build reporting and summaries
# - Error handling with build log uploads
#
# Outputs:
# - Individual artifacts for each build configuration
# - Packed archive containing all builds organized by architecture and tier
# - Build summaries and statistics
#
# Triggers:
# - Tag pushes (release events)
# - Manual workflow dispatch

on:
  push:
    tags:
      - "*"
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

env:
  # Global environment variables
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # MacOS x64 Standard builds
          - os: macos-13
            python-version: "3.9"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_py3.9
          - os: macos-13
            python-version: "3.10"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_py3.10
          - os: macos-13
            python-version: "3.11"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_py3.11
          - os: macos-13
            python-version: "3.12"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_py3.12
          - os: macos-13
            python-version: "3.13"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_py3.13
          # MacOS x64 Free Tier builds
          - os: macos-13
            python-version: "3.9"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_py3.9_freetier
          - os: macos-13
            python-version: "3.10"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_py3.10_freetier
          - os: macos-13
            python-version: "3.11"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_py3.11_freetier
          - os: macos-13
            python-version: "3.12"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_py3.12_freetier
          - os: macos-13
            python-version: "3.13"
            c_compiler: gcc-14
            cxx_compiler: g++-14
            xcode_version: "15.2"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_py3.13_freetier
          # MacOS ARM64 (Apple Silicon) Standard builds
          - os: macos-15
            python-version: "3.9"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.9
          - os: macos-15
            python-version: "3.10"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.10
          - os: macos-15
            python-version: "3.11"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.11
          - os: macos-15
            python-version: "3.12"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.12
          - os: macos-15
            python-version: "3.13"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.13
          # MacOS ARM64 (Apple Silicon) Free Tier builds
          - os: macos-15
            python-version: "3.9"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.9_freetier
          - os: macos-15
            python-version: "3.10"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.10_freetier
          - os: macos-15
            python-version: "3.11"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.11_freetier
          - os: macos-15
            python-version: "3.12"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.12_freetier
          - os: macos-15
            python-version: "3.13"
            c_compiler: clang
            cxx_compiler: clang++
            xcode_version: "16.4"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_macos_arm_py3.13_freetier

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.RADARSIMC}}
          submodules: recursive
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: ${{ matrix.xcode_version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/Homebrew
            ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.tier }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.tier }}-
            ${{ runner.os }}-${{ matrix.os }}-${{ matrix.python-version }}-
            ${{ runner.os }}-${{ matrix.os }}-

      - name: Install system dependencies
        run: |
          # Install ccache for faster compilation
          brew install ccache
          echo "$(brew --prefix ccache)/bin" >> $GITHUB_PATH

          # Set up ccache
          ccache --set-config=max_size=2G
          ccache --set-config=cache_dir=~/.ccache

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements-dev.txt

      - name: Display build information
        run: |
          echo "::group::Build Information"
          echo "OS: ${{ matrix.os }}"
          echo "Python: ${{ matrix.python-version }}"
          echo "Tier: ${{ matrix.tier }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "C Compiler: ${{ matrix.c_compiler }}"
          echo "C++ Compiler: ${{ matrix.cxx_compiler }}"
          echo "Xcode Version: ${{ matrix.xcode_version }}"
          echo "::endgroup::"

          echo "::group::System Information"
          uname -a
          sw_vers
          xcodebuild -version
          python --version
          pip --version
          ${{ matrix.c_compiler }} --version
          ${{ matrix.cxx_compiler }} --version
          echo "::endgroup::"

      - name: Build RadarSimPy
        env:
          CC: ${{ matrix.c_compiler }}
          CXX: ${{ matrix.cxx_compiler }}
          CCACHE_DIR: ~/.ccache
          CCACHE_COMPILERCHECK: content
        run: |
          echo "::group::Build Process"
          chmod +x build.sh
          ./build.sh --tier=${{ matrix.tier }} --arch=${{ matrix.arch }} --test=off --verbose
          echo "::endgroup::"

      - name: Display build statistics
        if: always()
        run: |
          echo "::group::Build Statistics"
          ccache --show-stats
          echo "::endgroup::"

      - name: Verify build artifacts
        run: |
          echo "::group::Build Verification"
          ls -la ./radarsimpy/
          if [ -f "./radarsimpy/__init__.py" ]; then
            echo "✓ Python module found"
          else
            echo "✗ Python module missing"
            exit 1
          fi

          # Check for compiled extensions
          if find ./radarsimpy -name "*.so" -o -name "*.dylib" -o -name "*.pyd" | grep -q .; then
            echo "✓ Compiled extensions found:"
            find ./radarsimpy -name "*.so" -o -name "*.dylib" -o -name "*.pyd"
          else
            echo "✗ No compiled extensions found"
            exit 1
          fi
          echo "::endgroup::"

      - name: Create build summary
        run: |
          echo "## Build Summary 🛠️" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| OS | ${{ matrix.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Version | ${{ matrix.python-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tier | ${{ matrix.tier }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture | ${{ matrix.arch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compiler | ${{ matrix.c_compiler }}/${{ matrix.cxx_compiler }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Xcode Version | ${{ matrix.xcode_version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact Name | ${{ matrix.artifact_name }} |" >> $GITHUB_STEP_SUMMARY

      - name: Archive built module
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: ./radarsimpy
          retention-days: 1
          compression-level: 6

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.artifact_name }}
          path: |
            ./build_logs/
            *.log
          retention-days: 1

  # Pack all artifacts into a single file
  pack-artifacts:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Delete downloaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            radarsimpy_macos_py*
            radarsimpy_macos_arm_py*

      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded Artifacts"
          find artifacts/ -type f -name "*.py" -o -name "*.so" -o -name "*.dylib" -o -name "*.pyd" | head -20
          echo "::endgroup::"

      - name: Create artifact structure
        run: |
          mkdir -p packed/radarsimpy_macos_all

          # Create base directory structure for final archive
          mkdir -p packed/radarsimpy_macos_all/standard
          mkdir -p packed/radarsimpy_macos_all/trial
          
          # Create temporary directories for building tier-specific packages
          mkdir -p temp/standard/MacOS_x86_64_CPU/radarsimpy
          mkdir -p temp/standard/MacOS_ARM_CPU/radarsimpy
          mkdir -p temp/trial/MacOS_x86_64_CPU/radarsimpy
          mkdir -p temp/trial/MacOS_ARM_CPU/radarsimpy

          # Copy each artifact to appropriate directory based on architecture and tier
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Determine target directory based on artifact name
              if [[ "$artifact_name" == *"_arm_"* ]]; then
                # ARM64 builds
                if [[ "$artifact_name" == *"_freetier"* ]]; then
                  target_dir="temp/trial/MacOS_ARM_CPU/radarsimpy"
                else
                  target_dir="temp/standard/MacOS_ARM_CPU/radarsimpy"
                fi
              else
                # x64 builds
                if [[ "$artifact_name" == *"_freetier"* ]]; then
                  target_dir="temp/trial/MacOS_x86_64_CPU/radarsimpy"
                else
                  target_dir="temp/standard/MacOS_x86_64_CPU/radarsimpy"
                fi
              fi
              
              # Ensure target directory exists
              mkdir -p "$target_dir"
              
              # Copy the radarsimpy module
              if [ -d "$dir/radarsimpy" ]; then
                echo "Copying radarsimpy module from $dir/radarsimpy to $target_dir/"
                cp -r "$dir/radarsimpy"/* "$target_dir/" 2>/dev/null || true
              else
                echo "Copying all contents from $dir to $target_dir/"
                # If radarsimpy is at root level
                cp -r "$dir"/* "$target_dir/" 2>/dev/null || true
              fi
            fi
          done
          
          # Create ZIP files for each architecture and tier
          echo "Creating MacOS_x86_64_CPU.zip for standard tier..."
          cd temp/standard && zip -r ../../packed/radarsimpy_macos_all/standard/MacOS_x86_64_CPU.zip MacOS_x86_64_CPU/ && cd ../..
          
          echo "Creating MacOS_ARM_CPU.zip for standard tier..."
          cd temp/standard && zip -r ../../packed/radarsimpy_macos_all/standard/MacOS_ARM_CPU.zip MacOS_ARM_CPU/ && cd ../..
          
          echo "Creating MacOS_x86_64_CPU.zip for trial tier..."
          cd temp/trial && zip -r ../../packed/radarsimpy_macos_all/trial/MacOS_x86_64_CPU.zip MacOS_x86_64_CPU/ && cd ../..
          
          echo "Creating MacOS_ARM_CPU.zip for trial tier..."
          cd temp/trial && zip -r ../../packed/radarsimpy_macos_all/trial/MacOS_ARM_CPU.zip MacOS_ARM_CPU/ && cd ../..
          
          # Create tar.gz files for each architecture and tier
          echo "Creating MacOS_x86_64_CPU.tar.gz for standard tier..."
          cd temp/standard && tar -czf ../../packed/radarsimpy_macos_all/standard/MacOS_x86_64_CPU.tar.gz MacOS_x86_64_CPU/ && cd ../..
          
          echo "Creating MacOS_ARM_CPU.tar.gz for standard tier..."
          cd temp/standard && tar -czf ../../packed/radarsimpy_macos_all/standard/MacOS_ARM_CPU.tar.gz MacOS_ARM_CPU/ && cd ../..
          
          echo "Creating MacOS_x86_64_CPU.tar.gz for trial tier..."
          cd temp/trial && tar -czf ../../packed/radarsimpy_macos_all/trial/MacOS_x86_64_CPU.tar.gz MacOS_x86_64_CPU/ && cd ../..
          
          echo "Creating MacOS_ARM_CPU.tar.gz for trial tier..."
          cd temp/trial && tar -czf ../../packed/radarsimpy_macos_all/trial/MacOS_ARM_CPU.tar.gz MacOS_ARM_CPU/ && cd ../..

      - name: Verify artifact structure
        run: |
          echo "::group::Artifact Structure Verification"
          echo "Final directory structure:"
          find packed/radarsimpy_macos_all -type f | sort
          echo ""
          echo "Verifying ZIP and tar.gz files exist:"
          
          if [ -f "packed/radarsimpy_macos_all/standard/MacOS_x86_64_CPU.zip" ]; then
            echo "✓ Standard macOS x86_64 ZIP found"
          else
            echo "✗ Standard macOS x86_64 ZIP missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/standard/MacOS_x86_64_CPU.tar.gz" ]; then
            echo "✓ Standard macOS x86_64 tar.gz found"
          else
            echo "✗ Standard macOS x86_64 tar.gz missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/standard/MacOS_ARM_CPU.zip" ]; then
            echo "✓ Standard macOS ARM ZIP found"
          else
            echo "✗ Standard macOS ARM ZIP missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/standard/MacOS_ARM_CPU.tar.gz" ]; then
            echo "✓ Standard macOS ARM tar.gz found"
          else
            echo "✗ Standard macOS ARM tar.gz missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/trial/MacOS_x86_64_CPU.zip" ]; then
            echo "✓ Trial macOS x86_64 ZIP found"
          else
            echo "✗ Trial macOS x86_64 ZIP missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/trial/MacOS_x86_64_CPU.tar.gz" ]; then
            echo "✓ Trial macOS x86_64 tar.gz found"
          else
            echo "✗ Trial macOS x86_64 tar.gz missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/trial/MacOS_ARM_CPU.zip" ]; then
            echo "✓ Trial macOS ARM ZIP found"
          else
            echo "✗ Trial macOS ARM ZIP missing"
          fi
          
          if [ -f "packed/radarsimpy_macos_all/trial/MacOS_ARM_CPU.tar.gz" ]; then
            echo "✓ Trial macOS ARM tar.gz found"
          else
            echo "✗ Trial macOS ARM tar.gz missing"
          fi
          echo "::endgroup::"

      - name: Create README for packed artifacts
        run: |
          cat > packed/radarsimpy_macos_all/README.md << 'EOF'
          # RadarSimPy macOS Build Artifacts

          This archive contains all RadarSimPy builds for macOS platforms organized by architecture and tier.

          ## Directory Structure

          The builds are organized in the following structure:

          ```
          radarsimpy_macos_all/
          ├── standard/
          │   ├── MacOS_x86_64_CPU.zip
          │   ├── MacOS_x86_64_CPU.tar.gz
          │   ├── MacOS_ARM_CPU.zip
          │   └── MacOS_ARM_CPU.tar.gz
          └── trial/
              ├── MacOS_x86_64_CPU.zip
              ├── MacOS_x86_64_CPU.tar.gz
              ├── MacOS_ARM_CPU.zip
              └── MacOS_ARM_CPU.tar.gz
          ```

          ## Architecture and Tier Information

          ### MacOS_x86_64_CPU (Intel-based Macs)
          - **standard/**: Full-featured builds with all capabilities
          - **trial/**: Free tier builds with limited features
          - Built on macOS 13 with GCC 14 compiler
          - Available in both ZIP and tar.gz formats
          - Each archive contains the complete radarsimpy module with all Python versions supported

          ### MacOS_ARM_CPU (Apple Silicon Macs)
          - **standard/**: Full-featured builds with all capabilities  
          - **trial/**: Free tier builds with limited features
          - Built on macOS 15 with Clang compiler
          - Available in both ZIP and tar.gz formats
          - Each archive contains the complete radarsimpy module with all Python versions supported

          ## Build Information

          - **Total Builds**: 20 (packaged into 8 files: 4 ZIP + 4 tar.gz)
          - **Architectures**: x86_64 (Intel), ARM64 (Apple Silicon)
          - **Python Versions**: 3.9, 3.10, 3.11, 3.12, 3.13
          - **Tiers**: Standard (full features), Trial (limited features)
          - **Formats**: ZIP and tar.gz for maximum compatibility
          - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Usage

          1. Extract the main archive
          2. Navigate to the desired tier directory (standard/ or trial/)
          3. Extract the appropriate architecture file (choose ZIP or tar.gz based on your preference)
          4. The radarsimpy module will be ready for use

          EOF

      - name: Create compressed archive
        run: |
          cd packed
          tar -czf radarsimpy_macos_all_builds.tar.gz radarsimpy_macos_all/

          # Create zip version as well
          zip -r radarsimpy_macos_all_builds.zip radarsimpy_macos_all/

          echo "::group::Archive Information"
          ls -lh *.tar.gz *.zip
          echo "::endgroup::"

      - name: Upload packed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radarsimpy_macos_all_builds
          path: |
            packed/radarsimpy_macos_all_builds.tar.gz
            packed/radarsimpy_macos_all_builds.zip
          retention-days: 1
          compression-level: 0

  # Summary job that runs after all builds complete
  build-summary:
    needs: [build, pack-artifacts]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# MacOS Build Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "Total builds: 20 (5 Python versions × 2 architectures × 2 tiers)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Architecture Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **x64 (Intel)**: 10 builds on macos-13" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64 (Apple Silicon)**: 10 builds on macos-15" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tier Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **Standard**: 10 builds" >> $GITHUB_STEP_SUMMARY
          echo "- **Free**: 10 builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Python Versions" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.9, 3.10, 3.11, 3.12, 3.13" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Packed Artifacts" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pack-artifacts.result }}" == "success" ]; then
            echo "✅ **All artifacts successfully packed into ZIP and tar.gz files by tier**" >> $GITHUB_STEP_SUMMARY
            echo "- Archive: \`radarsimpy_macos_all_builds\`" >> $GITHUB_STEP_SUMMARY
            echo "- Formats: tar.gz, zip" >> $GITHUB_STEP_SUMMARY
            echo "- Structure: 8 files (2 architectures × 2 tiers × 2 formats)" >> $GITHUB_STEP_SUMMARY
            echo "- Contains: All 20 build variants organized by architecture and tier" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Artifact packing failed or was skipped**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "Check individual job results above for detailed build information." >> $GITHUB_STEP_SUMMARY

          # Check if any builds failed
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some builds may have failed. Check individual job logs for details.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi

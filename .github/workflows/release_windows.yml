name: Release on Windows

# GitHub Actions workflow for building and packaging RadarSimPy on Windows platforms.
#
# This workflow builds RadarSimPy for Windows x64 architecture across multiple Python
# versions and build tiers (standard/free). It uses the latest Windows runner with
# MSVC compiler and provides comprehensive Windows-specific optimizations.
#
# Build Matrix:
# - Windows x64: MSVC compiler, 10 builds (5 Python × 2 tiers)
# - Python versions: 3.9, 3.10, 3.11, 3.12, 3.13
# - Build tiers: standard (full features), free (limited features)
# - Total builds: 10
#
# Features:
# - Comprehensive caching (pip)
# - Windows-specific dependency management
# - Artifact verification and validation
# - Windows-native artifact packing
# - Detailed build reporting and summaries
# - Error handling with build log uploads
# - PowerShell and CMD integration
#
# Outputs:
# - Individual artifacts for each build configuration
# - Packed ZIP archive containing all builds organized by tier
# - Build summaries and statistics
#
# Triggers:
# - Tag pushes (release events)
# - Manual workflow dispatch

on:
  push:
    tags:
      - "*"
  # Allow manual trigger from the Actions tab
  workflow_dispatch:

env:
  # Global environment variables
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  build:
    runs-on: windows-2025
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows Standard builds
          - python-version: "3.9"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_windows_py3.9
          - python-version: "3.10"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_windows_py3.10
          - python-version: "3.11"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_windows_py3.11
          - python-version: "3.12"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_windows_py3.12
          - python-version: "3.13"
            tier: standard
            arch: cpu
            artifact_name: radarsimpy_windows_py3.13
          # Windows Free Tier builds
          - python-version: "3.9"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_windows_py3.9_freetier
          - python-version: "3.10"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_windows_py3.10_freetier
          - python-version: "3.11"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_windows_py3.11_freetier
          - python-version: "3.12"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_windows_py3.12_freetier
          - python-version: "3.13"
            tier: free
            arch: cpu
            artifact_name: radarsimpy_windows_py3.13_freetier

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.RADARSIMC}}
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.tier }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.tier }}-
            ${{ runner.os }}-${{ matrix.python-version }}-
            ${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements-dev.txt

      - name: Display build information
        run: |
          echo "::group::Build Information"
          echo "OS: windows-latest"
          echo "Python: ${{ matrix.python-version }}"
          echo "Tier: ${{ matrix.tier }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "::endgroup::"

          echo "::group::System Information"
          systeminfo | findstr /C:"OS Name" /C:"OS Version"
          python --version
          pip --version
          echo "::endgroup::"
        shell: cmd

      - name: Build RadarSimPy
        run: |
          echo "::group::Build Process"
          .\build.bat --tier=${{ matrix.tier }} --arch=${{ matrix.arch }} --test=off
          echo "::endgroup::"
        shell: cmd

      - name: Verify build artifacts
        run: |
          echo "::group::Build Verification"
          dir /s .\radarsimpy\
          if exist ".\radarsimpy\__init__.py" (
            echo "✓ Python module found"
          ) else (
            echo "✗ Python module missing"
            exit /b 1
          )

          # Check for compiled extensions
          dir /s .\radarsimpy\*.pyd >nul 2>&1
          if %errorlevel% == 0 (
            echo "✓ Compiled extensions found:"
            dir /s .\radarsimpy\*.pyd
          ) else (
            echo "✗ No compiled extensions found"
            exit /b 1
          )
          echo "::endgroup::"
        shell: cmd

      - name: Create build summary
        run: |
          echo "## Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $env:GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| OS | windows-latest |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Python Version | ${{ matrix.python-version }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Tier | ${{ matrix.tier }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Architecture | ${{ matrix.arch }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "| Artifact Name | ${{ matrix.artifact_name }} |" >> $env:GITHUB_STEP_SUMMARY
        shell: powershell

      - name: Archive built module
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: .\radarsimpy
          retention-days: 1
          compression-level: 6

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ matrix.artifact_name }}
          path: |
            .\build_logs\
            *.log
          retention-days: 1

  # Pack all artifacts into a single file
  pack-artifacts:
    needs: build
    runs-on: windows-latest
    if: success()
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts
        shell: cmd

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts\

      - name: Delete downloaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            radarsimpy_windows_py*

      - name: Display downloaded artifacts
        run: |
          echo "::group::Downloaded Artifacts"
          dir /s artifacts\ | findstr /C:".py" /C:".pyd" /C:".dll" | findstr /v "Directory"
          echo "::endgroup::"
        shell: cmd

      - name: Create artifact structure
        run: |
          # Create base directory structure for final archive
          New-Item -Path "packed\radarsimpy_windows_cpu_all\standard" -ItemType Directory -Force
          New-Item -Path "packed\radarsimpy_windows_cpu_all\trial" -ItemType Directory -Force

          # Create temporary directories for building tier-specific packages
          New-Item -Path "temp\standard\radarsimpy" -ItemType Directory -Force
          New-Item -Path "temp\trial\radarsimpy" -ItemType Directory -Force

          # Process each artifact directory and organize by tier
          Get-ChildItem -Path "artifacts" -Directory | ForEach-Object {
            $artifactName = $_.Name
            $artifactPath = $_.FullName
            Write-Host "Processing artifact: $artifactName"
            
            # Determine target directory based on artifact name
            if ($artifactName -like "*_freetier*") {
              $tempDir = "temp\trial\radarsimpy"
              $tier = "trial"
            } else {
              $tempDir = "temp\standard\radarsimpy"
              $tier = "standard"
            }
            
            Write-Host "Target temp directory: $tempDir"
            
            # Copy the radarsimpy module to temp directory
            $sourceRadarsimpy = Join-Path $artifactPath "radarsimpy"
            if (Test-Path $sourceRadarsimpy) {
              Write-Host "Copying radarsimpy module from $sourceRadarsimpy to $tempDir"
              Copy-Item -Path "$sourceRadarsimpy\*" -Destination $tempDir -Recurse -Force
            } else {
              Write-Host "Copying all contents from $artifactPath to $tempDir"
              Copy-Item -Path "$artifactPath\*" -Destination $tempDir -Recurse -Force
            }
          }

          # Create ZIP files for each tier
          Write-Host "Creating Windows_x86_64_CPU.zip for standard tier..."
          Compress-Archive -Path "temp\standard\*" -DestinationPath "packed\radarsimpy_windows_cpu_all\standard\Windows_x86_64_CPU.zip" -Force

          Write-Host "Creating Windows_x86_64_CPU.zip for trial tier..."
          Compress-Archive -Path "temp\trial\*" -DestinationPath "packed\radarsimpy_windows_cpu_all\trial\Windows_x86_64_CPU.zip" -Force
        shell: powershell

      - name: Verify artifact structure
        run: |
          echo "::group::Artifact Structure Verification"
          echo "Final directory structure:"
          dir /s packed\radarsimpy_windows_cpu_all

          echo ""
          echo "Verifying ZIP files exist:"
          if exist "packed\radarsimpy_windows_cpu_all\standard\Windows_x86_64_CPU.zip" (
            echo "✓ Standard tier ZIP found"
          ) else (
            echo "✗ Standard tier ZIP missing"
          )

          if exist "packed\radarsimpy_windows_cpu_all\trial\Windows_x86_64_CPU.zip" (
            echo "✓ Trial tier ZIP found"
          ) else (
            echo "✗ Trial tier ZIP missing"
          )
          echo "::endgroup::"
        shell: cmd

      - name: Create README for packed artifacts
        run: |
          @echo off
          (
          echo # RadarSimPy Windows Build Artifacts
          echo.
          echo This archive contains all RadarSimPy builds for Windows platforms organized by tier.
          echo.
          echo ## Directory Structure
          echo.
          echo The builds are organized in the following structure:
          echo.
          echo ```
          echo radarsimpy_windows_cpu_all/
          echo ├── standard/
          echo │   └── Windows_x86_64_CPU.zip
          echo └── trial/
          echo     └── Windows_x86_64_CPU.zip
          echo ```
          echo.
          echo ## Tier Information
          echo.
          echo ### Windows_x86_64_CPU.zip ^(Windows x64^)
          echo - **standard/**: Full-featured builds with all capabilities
          echo - **trial/**: Free tier builds with limited features
          echo - Built on Windows with MSVC compiler
          echo - Each ZIP contains the complete radarsimpy module with all Python versions supported
          echo.
          echo ## Build Information
          echo.
          echo - **Total Builds**: 10 ^(packaged into 2 ZIP files^)
          echo - **Architecture**: x64
          echo - **Python Versions**: 3.9, 3.10, 3.11, 3.12, 3.13
          echo - **Tiers**: Standard ^(full features^), Trial ^(limited features^)
          echo - **Build Date**: %date% %time%
          echo.
          echo ## Usage
          echo.
          echo 1. Extract the main archive
          echo 2. Navigate to the desired tier directory ^(standard/ or trial/^)
          echo 3. Extract the Windows_x86_64_CPU.zip file
          echo 4. The radarsimpy module will be ready for use
          echo.
          ) > packed\radarsimpy_windows_cpu_all\README.md
        shell: cmd

      - name: Create compressed archive
        run: |
          cd packed
          echo # Create zip archive
          powershell -Command "Compress-Archive -Path 'radarsimpy_windows_cpu_all' -DestinationPath 'radarsimpy_windows_cpu_all_builds.zip' -Force"

          echo "::group::Archive Information"
          dir *.zip
          echo "::endgroup::"
        shell: cmd

      - name: Upload packed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: radarsimpy_windows_cpu_all_builds
          path: packed\radarsimpy_windows_cpu_all_builds.zip
          retention-days: 1
          compression-level: 0

  # Summary job that runs after all builds complete
  build-summary:
    needs: [build, pack-artifacts]
    runs-on: windows-latest
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "# Windows Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "## Build Matrix Results" >> $env:GITHUB_STEP_SUMMARY
          echo "Total builds: 10 [5 Python versions x 2 tiers]" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Architecture Distribution" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Windows x64**: 10 builds on windows-latest" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Tier Distribution" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Standard**: 5 builds" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Free**: 5 builds" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Python Versions" >> $env:GITHUB_STEP_SUMMARY
          echo "- Python 3.9, 3.10, 3.11, 3.12, 3.13" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Packed Artifacts" >> $env:GITHUB_STEP_SUMMARY
          if ("${{ needs.pack-artifacts.result }}" -eq "success") {
            echo "**All artifacts successfully packed into ZIP files by tier**" >> $env:GITHUB_STEP_SUMMARY
            echo "- Archive: ``radarsimpy_windows_cpu_all_builds``" >> $env:GITHUB_STEP_SUMMARY
            echo "- Format: zip" >> $env:GITHUB_STEP_SUMMARY
            echo "- Structure: standard/Windows_x86_64_CPU.zip and trial/Windows_x86_64_CPU.zip" >> $env:GITHUB_STEP_SUMMARY
            echo "- Contains: All 10 build variants organized by tier in separate ZIP files" >> $env:GITHUB_STEP_SUMMARY
          } else {
            echo "**Artifact packing failed or was skipped**" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $env:GITHUB_STEP_SUMMARY
          echo "Check individual job results above for detailed build information." >> $env:GITHUB_STEP_SUMMARY

          # Check if any builds failed
          if ("${{ needs.build.result }}" -ne "success") {
            echo "" >> $env:GITHUB_STEP_SUMMARY
            echo "**Some builds may have failed. Check individual job logs for details.**" >> $env:GITHUB_STEP_SUMMARY
          } else {
            echo "" >> $env:GITHUB_STEP_SUMMARY
            echo "**All builds completed successfully!**" >> $env:GITHUB_STEP_SUMMARY
          }
        shell: powershell
